[tox]
skipsdist = True
skip_missing_interpreters = True
envlist =
    ansible{2.17,2.18}-py{310,311,312,313}-{with_constraints,without_constraints}

[common]
collection_name = cdot65.scm
collection_path = cdot65/scm

format_dirs = {toxinidir}/plugins {toxinidir}/tests
lint_dirs = {toxinidir}/plugins {toxinidir}/tests

ansible_desc =
    ansible2.17: Ansible-core 2.17
    ansible2.18: Ansible-core 2.18
const_desc =
    with_constraints: (With SDK constraints)

ansible_home = {envtmpdir}/ansible_home
ansible_collections_path = {[common]ansible_home}/collections
full_collection_path = {[common]ansible_home}/collections/ansible_collections/{[common]collection_path}

[testenv]
description = Run the unit tests {[common]ansible_desc}/{base_python} {[common]const_desc}
set_env =
  ANSIBLE_HOME={[common]ansible_home}
  ANSIBLE_COLLECTIONS_PATH={[common]ansible_collections_path}
labels = unit
deps =
  pytest
  mock
  pytest-mock
  pytest-cov
  pytest-ansible
  pytest-xdist
  ansible2.17: ansible-core>2.17,<2.18
  ansible2.18: ansible-core>2.18,<2.19
  with_constraints: pan-scm-sdk==0.3.32
  without_constraints: pan-scm-sdk
passenv = HOME USERPROFILE SCM_* AWS_*
commands_pre =
  # Create the minimal collections tree and copy/build the local collection into it
  {envpython} {toxinidir}/tests/utils/build_collection.py
  {envpython} {toxinidir}/tests/utils/collection_prep.py
commands =
  poetry install --no-root
  # Run pytest
  coverage run -m pytest -xvs {toxinidir}/tests/unit/ {posargs}

[testenv:sanity]
description = Run all ansible-test sanity tests
deps =
  ansible-core
commands_pre =
  {envpython} {toxinidir}/tests/utils/sanity_prep.py
commands =
  ansible-test sanity --python 3.{env:ANSIBLE_TEST_PYTHON_VERSION:10} {posargs}

[testenv:integration]
description = Run integration tests
deps =
  ansible-core
passenv = HOME USERPROFILE SCM_* AWS_*
commands_pre =
  {envpython} {toxinidir}/tests/utils/integration_prep.py
commands =
  ansible-test integration {posargs:folder folder_info}

[testenv:flake8-lint]
description = Run flake8
deps =
  flake8>=6.0.0
commands_pre =
commands =
  flake8 {posargs:{[common]format_dirs}}

[testenv:black-format]
description = Run black formatter
deps =
  black>=23.1.0
commands =
  black {posargs:{[common]format_dirs}}

[testenv:isort-format]
description = Run isort formatter
deps =
  isort>=5.12.0
commands =
  isort {posargs:{[common]format_dirs}}

[testenv:ruff-format]
description = Run ruff formatter
deps =
  ruff>=0.0.292
commands =
  ruff format {posargs:{[common]format_dirs}}

[testenv:mypy]
description = Run mypy static type checker
deps =
  mypy>=1.5.1
commands =
  mypy {posargs:{[common]format_dirs}}

[testenv:ansible-lint]
description = Run ansible-lint
deps =
  ansible-lint
commands =
  ansible-lint {posargs}
